def rotate(matrix, n):
	for layer in range(n/2):
		first = layer;
		last = n - 1 - layer;
		for i in range(first, last):
			print(pp_matrix(matrix))
			print("####")
			offset = i - first; #  save top
			top = matrix[first][i];
			#  # left -> top
			matrix[first][i] = matrix[last-offset][first];
			#  bottom -> left
			matrix[last-offset][first] = matrix[last][last - offset];
			#  right -> bottom
			matrix[last][last - offset] = matrix[i][last];
			#  top -> right
			matrix[i][last] = top;
	return matrix

def pp_matrix(matrix):
	return [" ".join(c) for c in row for row in matrix]
	# return "\n".join([" ".join(str(m)) for m in matrix])

a = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]
print(pp_matrix(rotate(a,3)))

# def rotate(matrix, n=len(matrix)):
# 	for layer in range(n/2):
# 	for (int layer = 0; layer < n / 2; ++layer) {
# 		int first = layer;
# 		int last =n- 1- layer;
# 		for(int i = first; i < last; ++i) {
# 			int offset = i - first; // save top
# 			int top = matrix[first][i];
# 			// left -> top
# 			matrix[first][i] = matrix[last-offset][first];
# 			// bottom -> left
# 			matrix[last-offset][first] = matrix[last][last - offset];
# 			// right -> bottom
# 			matrix[last][last - offset] = matrix[i][last];
# 			// top -> right
# 			matrix[i][last] = top;
# 		}
# 	}
# }